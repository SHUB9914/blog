data modelng in cassandra 
-------------------------------


What is the role of Partitioning & Clustering Keys in Cassandra -
------------------------------------------------------------------

Primary and Clustering Keys should be one of the very first things you learn about when modeling Cassandra data.  Most people coming from a relational background automatically think, “Yeah, I know what a Primary Key is”, and gloss right over it.  Because of this, there always seems to be a lot of confusion around the topic of Primary Keys in Cassandra.  With this post, I will try to demystify the confusion.  I will cover what the different types of Primary Keys are, how they can be used, what their purpose is, and how they affect your queries.

The Basics
-----------------

Primary Keys are defined when you create your table.  The most basic primary key is a single column.  A single column is great for when you know the value that you will be searching for.  The following table has a single column, emp_id, as the primary key:

CREATE TABLE employee ( 
    emp_id text, 
    name text , 
    city text,
    state_province text,
    country_code text,
    PRIMARY KEY (emp_id) 
); 

A single column Primary Key is also called a Partition Key.  When Cassandra is deciding where in the cluster to store this particular piece of data, it will hash the partition key.  The value of that hash dictates where the data will reside and which replicas will be responsible for it.



Partition Key
------------------

The Partition Key is responsible for the distribution of data amongst the nodes.  I defined a four node cluster on which data will be distribute on basis of hash values , let’s assume hash values are between 0-100.  When we insert the first row into the employee table, the value of emp_id will be hashed.  Let’s also assume that the first record will have a hash of 34.  That will fall into the values that Node 2’s partition is assigned. 



IMAGE-------------------







Compound Keys
---------------------

- A multi-column primary key is called a Compound Key.
- Primary keys can also be more than one column.  


CREATE TABLE crossfit_gyms_by_location ( 
    country_code text,
    state_province text,
    city text,
    gym_name text,
    PRIMARY KEY (country_code, state_province, city, gym_name) 
); 


This example has four columns in the Primary Key clause.  An interesting characteristic of Compound Keys is that only the first column is considered the Partition Key.  There rest of the columns in the Primary Key clause are Clustering Keys.


Order By
-------------------

What if I wanted to change the default sort order from ascending to descending?  There is an additional WITH clause that you need to add to the CREATE TABLE to make this possible.



CREATE TABLE crossfit_gyms_by_location ( 
    country_code text,
    state_province text,
    city text,
    gym_name text,
    PRIMARY KEY (country_code, state_province, city, gym_name) 
) WITH CLUSTERING ORDER BY (state_province DESC, city ASC, gym_name ASC); 


Now we’ve changed the ordering of the Clustering Keys to sort state_province in descending order.  Note, I did need to specify that city and gym_name is still in ascending order, even though it’s the default sort order.  Did you notice that I did not specify what the sort is for country_code?  Since it’s the partition key, there is nothing to sort as hashed values won’t be close to each other in the cluster.




Clustering Keys
-------------------

Each additional column that is added to the Primary Key clause is called a Clustering Key.  A clustering key is responsible for sorting data within the partition.  In our example crossfit_gyms_by_location table, country_code is the partition key with state_province, city, & gym_name acting as the clustering keys.  By default, the clustering key columns are sorted in ascending order.


Data Example
---------------


INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('USA', 'NY', 'New York', 'CrossFit NYC');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('USA', 'NY', 'New York', 'CrossFit Metropolis');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('USA', 'NV', 'Las Vegas', 'CrossFit Las Vegas');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('USA', 'NV', 'Las Vegas', 'Kaizen CrossFit');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('CAN', 'ON', 'Toronto', 'CrossFit Toronto');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('CAN', 'ON', 'Toronto', 'CrossFit Leslieville');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('CAN', 'BC', 'Vancouver', 'CrossFit Vancouver');
INSERT INTO crossfit_gyms_by_location (country_code, state_province, city, gym_name) VALUES ('CAN', 'BC', 'Vancouver', 'CrossFit BC');


Now we have some data to see what this all is doing.  The first column, country_code has values of USA & CAN.  Both will be hashed and stored in different partitions.  The way that the rows are stored in those partitions will be dictated by the WITH CLUSTERING ORDER BY clause that we defined.



 country_code | state_province | city          | gym_name
--------------+----------------+---------------+--------------------------
          CAN |             ON |       Toronto |     CrossFit Leslieville
          CAN |             ON |       Toronto |         CrossFit Toronto
          CAN |             BC |     Vancouver |              CrossFit BC
          CAN |             BC |     Vancouver |       CrossFit Vancouver
          USA |             NY |      New York |      CrossFit Metropolis
          USA |             NY |      New York |             CrossFit NYC
          USA |             NV |     Las Vegas |       CrossFit Las Vegas
          USA |             NV |     Las Vegas |          Kaizen CrossFit
          
          



Composite Key
-------------------


A Composite Key is when you have a multi-column Partition Key.  The above example only used country_code for partitioning.  This means that all records with a country_code value of “USA” are in the same partition.
Avoiding wide rows is the perfect reason to move to a Composite Key.  Let’s change the Partition Key to include the state_providence & city columns.  We do this by nesting parenthesis around the columns that are to be a Composite Key, as follows:

CREATE TABLE crossfit_gyms_by_location ( 
    country_code text,
    state_province text,
    city text,
    gym_name text,
    PRIMARY KEY ((country_code, state_province, city), gym_name) 
) WITH CLUSTERING ORDER BY (gym_name ASC)


What this does is it changes the hash value from being calculated off of only country_code.  Now it will be calculated off of the combination of country_code, state_province, & city.  Now we aren’t sorting on those included columns.  Each combination of the three columns have their own hash value and will be stored in completely different partition in the cluster

